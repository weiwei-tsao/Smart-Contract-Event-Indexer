version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: event-indexer-postgres
    environment:
      POSTGRES_USER: indexer
      POSTGRES_PASSWORD: indexer_password
      POSTGRES_DB: event_indexer
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U indexer -d event_indexer"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - indexer-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: event-indexer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - indexer-network

  # Ganache - Local Ethereum Test Network
  ganache:
    image: trufflesuite/ganache:latest
    container_name: event-indexer-ganache
    ports:
      - "8545:8545"
    command: >
      --mnemonic "test test test test test test test test test test test junk"
      --accounts 10
      --defaultBalanceEther 1000
      --gasLimit 12000000
      --gasPrice 20000000000
      --networkId 1337
      --chain.chainId 1337
      --host 0.0.0.0
      --port 8545
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8545"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - indexer-network

  # Adminer - Database Management UI
  adminer:
    image: adminer:latest
    container_name: event-indexer-adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - indexer-network

  # Migration Service (runs migrations and exits)
  migrate:
    image: migrate/migrate:latest
    container_name: event-indexer-migrate
    volumes:
      - ./migrations:/migrations
    command: >
      -path=/migrations
      -database="postgres://indexer:indexer_password@postgres:5432/event_indexer?sslmode=disable"
      up
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - indexer-network
    profiles:
      - tools

  # Indexer Service
  indexer-service:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.indexer
    container_name: event-indexer-service
    environment:
      - DATABASE_URL=postgres://indexer:indexer_password@postgres:5432/event_indexer?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - RPC_URL=http://ganache:8545
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      ganache:
        condition: service_healthy
    networks:
      - indexer-network
    restart: unless-stopped

  # Query Service
  query-service:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.query-service
    container_name: event-indexer-query-service
    ports:
      - "8081:8081"
    environment:
      - DATABASE_URL=postgres://indexer:indexer_password@postgres:5432/event_indexer?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - QUERY_SERVICE_PORT=8081
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - indexer-network
    restart: unless-stopped

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.api-gateway
    container_name: event-indexer-api-gateway
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgres://indexer:indexer_password@postgres:5432/event_indexer?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - QUERY_SERVICE_ADDR=query-service:8081
      - ADMIN_SERVICE_ADDR=admin-service:8082
      - API_GATEWAY_PORT=8000
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      query-service:
        condition: service_started
    networks:
      - indexer-network
    restart: unless-stopped

  # Admin Service
  admin-service:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.admin-service
    container_name: event-indexer-admin-service
    ports:
      - "8082:8082"
    environment:
      - DATABASE_URL=postgres://indexer:indexer_password@postgres:5432/event_indexer?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - ADMIN_SERVICE_PORT=8082
      - LOG_LEVEL=info
      - LOG_FORMAT=json
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - indexer-network
    restart: unless-stopped

networks:
  indexer-network:
    driver: bridge
    name: event-indexer-network

volumes:
  postgres_data:
    name: event-indexer-postgres-data
  redis_data:
    name: event-indexer-redis-data


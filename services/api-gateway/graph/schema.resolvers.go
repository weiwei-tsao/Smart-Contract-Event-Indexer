package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.42

import (
	"context"
	"fmt"

	"github.com/smart-contract-event-indexer/api-gateway/graph/generated"
	"github.com/smart-contract-event-indexer/api-gateway/graph/model"
	"github.com/smart-contract-event-indexer/shared/models"
)

// ID is the resolver for the id field.
func (r *contractResolver) ID(ctx context.Context, obj *models.Contract) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// StartBlock is the resolver for the startBlock field.
func (r *contractResolver) StartBlock(ctx context.Context, obj *models.Contract) (models.BigInt, error) {
	panic(fmt.Errorf("not implemented: StartBlock - startBlock"))
}

// CurrentBlock is the resolver for the currentBlock field.
func (r *contractResolver) CurrentBlock(ctx context.Context, obj *models.Contract) (models.BigInt, error) {
	panic(fmt.Errorf("not implemented: CurrentBlock - currentBlock"))
}

// IsActive is the resolver for the isActive field.
func (r *contractResolver) IsActive(ctx context.Context, obj *models.Contract) (bool, error) {
	panic(fmt.Errorf("not implemented: IsActive - isActive"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *contractResolver) CreatedAt(ctx context.Context, obj *models.Contract) (*models.Timestamp, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// UpdatedAt is the resolver for the updatedAt field.
func (r *contractResolver) UpdatedAt(ctx context.Context, obj *models.Contract) (*models.Timestamp, error) {
	panic(fmt.Errorf("not implemented: UpdatedAt - updatedAt"))
}

// LatestBlock is the resolver for the latestBlock field.
func (r *contractStatsResolver) LatestBlock(ctx context.Context, obj *models.ContractStats) (models.BigInt, error) {
	panic(fmt.Errorf("not implemented: LatestBlock - latestBlock"))
}

// UniqueAddresses is the resolver for the uniqueAddresses field.
func (r *contractStatsResolver) UniqueAddresses(ctx context.Context, obj *models.ContractStats) (*int, error) {
	panic(fmt.Errorf("not implemented: UniqueAddresses - uniqueAddresses"))
}

// LastIndexedAt is the resolver for the lastIndexedAt field.
func (r *contractStatsResolver) LastIndexedAt(ctx context.Context, obj *models.ContractStats) (*models.Timestamp, error) {
	panic(fmt.Errorf("not implemented: LastIndexedAt - lastIndexedAt"))
}

// ID is the resolver for the id field.
func (r *eventResolver) ID(ctx context.Context, obj *models.Event) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// BlockNumber is the resolver for the blockNumber field.
func (r *eventResolver) BlockNumber(ctx context.Context, obj *models.Event) (models.BigInt, error) {
	panic(fmt.Errorf("not implemented: BlockNumber - blockNumber"))
}

// BlockTimestamp is the resolver for the blockTimestamp field.
func (r *eventResolver) BlockTimestamp(ctx context.Context, obj *models.Event) (*models.Timestamp, error) {
	panic(fmt.Errorf("not implemented: BlockTimestamp - blockTimestamp"))
}

// TransactionHash is the resolver for the transactionHash field.
func (r *eventResolver) TransactionHash(ctx context.Context, obj *models.Event) (string, error) {
	panic(fmt.Errorf("not implemented: TransactionHash - transactionHash"))
}

// Args is the resolver for the args field.
func (r *eventResolver) Args(ctx context.Context, obj *models.Event) ([]*models.EventArg, error) {
	panic(fmt.Errorf("not implemented: Args - args"))
}

// RawLog is the resolver for the rawLog field.
func (r *eventResolver) RawLog(ctx context.Context, obj *models.Event) (*string, error) {
	panic(fmt.Errorf("not implemented: RawLog - rawLog"))
}

// CreatedAt is the resolver for the createdAt field.
func (r *eventResolver) CreatedAt(ctx context.Context, obj *models.Event) (*models.Timestamp, error) {
	panic(fmt.Errorf("not implemented: CreatedAt - createdAt"))
}

// Key is the resolver for the key field.
func (r *eventArgResolver) Key(ctx context.Context, obj *models.EventArg) (string, error) {
	panic(fmt.Errorf("not implemented: Key - key"))
}

// Value is the resolver for the value field.
func (r *eventArgResolver) Value(ctx context.Context, obj *models.EventArg) (string, error) {
	panic(fmt.Errorf("not implemented: Value - value"))
}

// AddContract is the resolver for the addContract field.
func (r *mutationResolver) AddContract(ctx context.Context, input models.AddContractInput) (*model.AddContractPayload, error) {
	panic(fmt.Errorf("not implemented: AddContract - addContract"))
}

// RemoveContract is the resolver for the removeContract field.
func (r *mutationResolver) RemoveContract(ctx context.Context, address models.Address) (*model.RemoveContractPayload, error) {
	panic(fmt.Errorf("not implemented: RemoveContract - removeContract"))
}

// TriggerBackfill is the resolver for the triggerBackfill field.
func (r *mutationResolver) TriggerBackfill(ctx context.Context, input model.BackfillInput) (*model.BackfillPayload, error) {
	panic(fmt.Errorf("not implemented: TriggerBackfill - triggerBackfill"))
}

// UpdateContract is the resolver for the updateContract field.
func (r *mutationResolver) UpdateContract(ctx context.Context, address models.Address, confirmBlocks *int, isActive *bool) (*model.AddContractPayload, error) {
	panic(fmt.Errorf("not implemented: UpdateContract - updateContract"))
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context, filter *models.EventFilter, pagination *model.PaginationInput) (*models.EventConnection, error) {
	panic(fmt.Errorf("not implemented: Events - events"))
}

// EventsByTransaction is the resolver for the eventsByTransaction field.
func (r *queryResolver) EventsByTransaction(ctx context.Context, txHash string) ([]*models.Event, error) {
	panic(fmt.Errorf("not implemented: EventsByTransaction - eventsByTransaction"))
}

// EventsByAddress is the resolver for the eventsByAddress field.
func (r *queryResolver) EventsByAddress(ctx context.Context, address models.Address, pagination *model.PaginationInput) (*models.EventConnection, error) {
	panic(fmt.Errorf("not implemented: EventsByAddress - eventsByAddress"))
}

// Contract is the resolver for the contract field.
func (r *queryResolver) Contract(ctx context.Context, address models.Address) (*models.Contract, error) {
	panic(fmt.Errorf("not implemented: Contract - contract"))
}

// Contracts is the resolver for the contracts field.
func (r *queryResolver) Contracts(ctx context.Context, isActive *bool) ([]*models.Contract, error) {
	panic(fmt.Errorf("not implemented: Contracts - contracts"))
}

// ContractStats is the resolver for the contractStats field.
func (r *queryResolver) ContractStats(ctx context.Context, address models.Address) (*models.ContractStats, error) {
	panic(fmt.Errorf("not implemented: ContractStats - contractStats"))
}

// SystemStatus is the resolver for the systemStatus field.
func (r *queryResolver) SystemStatus(ctx context.Context) (*model.SystemStatus, error) {
	panic(fmt.Errorf("not implemented: SystemStatus - systemStatus"))
}

// StartBlock is the resolver for the startBlock field.
func (r *addContractInputResolver) StartBlock(ctx context.Context, obj *models.AddContractInput, data models.BigInt) error {
	panic(fmt.Errorf("not implemented: StartBlock - startBlock"))
}

// FromBlock is the resolver for the fromBlock field.
func (r *eventFilterResolver) FromBlock(ctx context.Context, obj *models.EventFilter, data *models.BigInt) error {
	panic(fmt.Errorf("not implemented: FromBlock - fromBlock"))
}

// ToBlock is the resolver for the toBlock field.
func (r *eventFilterResolver) ToBlock(ctx context.Context, obj *models.EventFilter, data *models.BigInt) error {
	panic(fmt.Errorf("not implemented: ToBlock - toBlock"))
}

// Addresses is the resolver for the addresses field.
func (r *eventFilterResolver) Addresses(ctx context.Context, obj *models.EventFilter, data []models.Address) error {
	panic(fmt.Errorf("not implemented: Addresses - addresses"))
}

// TransactionHash is the resolver for the transactionHash field.
func (r *eventFilterResolver) TransactionHash(ctx context.Context, obj *models.EventFilter, data *string) error {
	panic(fmt.Errorf("not implemented: TransactionHash - transactionHash"))
}

// Contract returns generated.ContractResolver implementation.
func (r *Resolver) Contract() generated.ContractResolver { return &contractResolver{r} }

// ContractStats returns generated.ContractStatsResolver implementation.
func (r *Resolver) ContractStats() generated.ContractStatsResolver { return &contractStatsResolver{r} }

// Event returns generated.EventResolver implementation.
func (r *Resolver) Event() generated.EventResolver { return &eventResolver{r} }

// EventArg returns generated.EventArgResolver implementation.
func (r *Resolver) EventArg() generated.EventArgResolver { return &eventArgResolver{r} }

// Mutation returns generated.MutationResolver implementation.
func (r *Resolver) Mutation() generated.MutationResolver { return &mutationResolver{r} }

// Query returns generated.QueryResolver implementation.
func (r *Resolver) Query() generated.QueryResolver { return &queryResolver{r} }

// AddContractInput returns generated.AddContractInputResolver implementation.
func (r *Resolver) AddContractInput() generated.AddContractInputResolver {
	return &addContractInputResolver{r}
}

// EventFilter returns generated.EventFilterResolver implementation.
func (r *Resolver) EventFilter() generated.EventFilterResolver { return &eventFilterResolver{r} }

type contractResolver struct{ *Resolver }
type contractStatsResolver struct{ *Resolver }
type eventResolver struct{ *Resolver }
type eventArgResolver struct{ *Resolver }
type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type addContractInputResolver struct{ *Resolver }
type eventFilterResolver struct{ *Resolver }

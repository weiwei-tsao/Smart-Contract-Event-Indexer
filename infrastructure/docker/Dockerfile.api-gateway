# Multi-stage Dockerfile for API Gateway Service

# Stage 1: Build stage
FROM golang:1.21-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git make gcc musl-dev

# Set working directory
WORKDIR /build

# Copy go workspace and modules
COPY go.work go.work
COPY shared/ shared/
COPY services/api-gateway/ services/api-gateway/
COPY graphql/ graphql/

# Download dependencies
WORKDIR /build/services/api-gateway
RUN go mod download

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -ldflags="-w -s" -o api-gateway ./cmd/main.go

# Stage 2: Runtime stage
FROM alpine:latest

# Install runtime dependencies
RUN apk --no-cache add ca-certificates tzdata

# Create non-root user
RUN addgroup -g 1000 apigateway && \
    adduser -D -u 1000 -G apigateway apigateway

# Set working directory
WORKDIR /app

# Copy binary from builder
COPY --from=builder /build/services/api-gateway/api-gateway .

# Copy GraphQL schemas
COPY --from=builder /build/graphql/ ./graphql/

# Change ownership
RUN chown -R apigateway:apigateway /app

# Switch to non-root user
USER apigateway

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:8000/health || exit 1

# Run the application
ENTRYPOINT ["./api-gateway"]

